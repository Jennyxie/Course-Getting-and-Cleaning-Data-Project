myHist(mean(galton$child))
# load necessary packages/install if needed
library(ggplot2); library(UsingR); data(galton)
# function to plot the histograms
myHist <- function(mu){
# calculate the mean squares
mse <- mean((galton$child - mu)^2)
# plot histogram
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon",
colour = "black", binwidth=1)
# add vertical line marking the center value mu
g <- g + geom_vline(xintercept = mu, size = 2)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
# manipulate allows the user to change the variable mu to see how the mean squares changes
# library(manipulate); manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))]
# plot the correct graph
myHist(mean(galton$child))
install.packages("galton")
data(galton)
galton
data(galton)
install.packages(c("boot", "curl", "mgcv", "nlme", "nnet", "openssl", "rmarkdown"))
data(dalton)
# load necessary packages/install if needed
library(ggplot2); library(UsingR); data(galton)
# function to plot the histograms
myHist <- function(mu){
# calculate the mean squares
mse <- mean((galton$child - mu)^2)
# plot histogram
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon",
colour = "black", binwidth=1)
# add vertical line marking the center value mu
g <- g + geom_vline(xintercept = mu, size = 2)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
# manipulate allows the user to change the variable mu to see how the mean squares changes
# library(manipulate); manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))]
# plot the correct graph
myHist(mean(galton$child))
data(dal)
install.packages("UsingR")
library(UsingR)
data(galton)
#store all data in one data frame (ey and ex2 are residuals with respect to x2)
dat<-data.frame(y=y,x1=x1,x2=x2,ey=resid(lm(y~x2)),ex1=resid(lm(x1~x2)))
#plot y vs x1
g<-ggplot(dat,aes(y=y,x=x1,colour=x2))+geom_poing(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_poing(size=1.5)+ggtitle("unadjusted=y vs x1")
#plot residual of y adjusted for x2 vs residual of x1 adjusted for x2
g2<-ggplot(dat,aes(y=ey,x=ex1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("adjusted=y,x1 residuals with x2 removed")+labs(x="resid(x1~x2)",y="resid(y~x2)")
#xombine plots
multiplot2(g,g2, cols=2)
#store all data in one data frame (ey and ex2 are residuals with respect to x2)
dat<-data.frame(y=y,x1=x1,x2=x2,ey=resid(lm(y~x2)),ex1=resid(lm(x1~x2)))
#plot y vs x1
g<-ggplot(dat,aes(y=y,x=x1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_poing(size=1.5)+ggtitle("unadjusted=y vs x1")
#plot residual of y adjusted for x2 vs residual of x1 adjusted for x2
g2<-ggplot(dat,aes(y=ey,x=ex1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("adjusted=y,x1 residuals with x2 removed")+labs(x="resid(x1~x2)",y="resid(y~x2)")
#xombine plots
multiplot(g,g2, cols=2)
#store all data in one data frame (ey and ex2 are residuals with respect to x2)
dat<-data.frame(y=y,x1=x1,x2=x2,ey=resid(lm(y~x2)),ex1=resid(lm(x1~x2)))
#plot y vs x1
g<-ggplot(dat,aes(y=y,x=x1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("unadjusted=y vs x1")
#plot residual of y adjusted for x2 vs residual of x1 adjusted for x2
g2<-ggplot(dat,aes(y=ey,x=ex1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("adjusted=y,x1 residuals with x2 removed")+labs(x="resid(x1~x2)",y="resid(y~x2)")
#xombine plots
multiplot(g,g2, cols=2)
multiplot()
?multiple plot
multiple plot(x,y)
#store all data in one data frame (ey and ex2 are residuals with respect to x2)
dat<-data.frame(y=y,x1=x1,x2=x2,ey=resid(lm(y~x2)),ex1=resid(lm(x1~x2)))
#plot y vs x1
g<-ggplot(dat,aes(y=y,x=x1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("unadjusted=y vs x1")
#plot residual of y adjusted for x2 vs residual of x1 adjusted for x2
g2<-ggplot(dat,aes(y=ey,x=ex1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("adjusted=y,x1 residuals with x2 removed")+labs(x="resid(x1~x2)",y="resid(y~x2)")
#xombine plots
multipleplot(g,g2, cols=2)
##define multiplot function
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
## define subplots (short example here, I specified some more aesthetics in my script)
plot1a <- qplot(variable1,variable2,data=Mydataframe1)
plot1b <- qplot(variable1,variable3,data=Mydataframe1)
plot1c <- qplot(variable1,variable2,data=Mydataframe2)
plot1d <- qplot(variable1,variable3,data=Mydataframe2)
## plot in one frame
Myplot <- multiplot(plot1a,plot1b,plot1c,plot1d, cols=2)
#store all data in one data frame (ey and ex2 are residuals with respect to x2)
dat<-data.frame(y=y,x1=x1,x2=x2,ey=resid(lm(y~x2)),ex1=resid(lm(x1~x2)))
#plot y vs x1
g<-ggplot(dat,aes(y=y,x=x1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("unadjusted=y vs x1")
#plot residual of y adjusted for x2 vs residual of x1 adjusted for x2
g2<-ggplot(dat,aes(y=ey,x=ex1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("adjusted=y,x1 residuals with x2 removed")+labs(x="resid(x1~x2)",y="resid(y~x2)")
#xombine plots
multipleplot(g,g2, cols=2)
#store all data in one data frame (ey and ex2 are residuals with respect to x2)
dat<-data.frame(y=y,x1=x1,x2=x2,ey=resid(lm(y~x2)),ex1=resid(lm(x1~x2)))
#plot y vs x1
g<-ggplot(dat,aes(y=y,x=x1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("unadjusted=y vs x1")
#plot residual of y adjusted for x2 vs residual of x1 adjusted for x2
g2<-ggplot(dat,aes(y=ey,x=ex1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("adjusted=y,x1 residuals with x2 removed")+labs(x="resid(x1~x2)",y="resid(y~x2)")
#xombine plots
multiplot(g,g2, cols=2)
g,g2
g
#store all data in one data frame (ey and ex2 are residuals with respect to x2)
> dat<-data.frame(y=y,x1=x1,x2=x2,ey=resid(lm(y~x2)),ex1=resid(lm(x1~x2)))
> #plot y vs x1
> g<-ggplot(dat,aes(y=y,x=x1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("unadjusted=y vs x1")
> #plot residual of y adjusted for x2 vs residual of x1 adjusted for x2
> g2<-ggplot(dat,aes(y=ey,x=ex1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("adjusted=y,x1 residuals with x2 removed")+labs(x="resid(x1~x2)",y="resid(y~x2)")
> #xombine plots
> multiplot(g,g2, cols=2)
#store all data in one data frame (ey and ex2 are residuals with respect to x2)
> dat<-data.frame(y=y,x1=x1,x2=x2,ey=resid(lm(y~x2)),ex1=resid(lm(x1~x2)))
> #plot y vs x1
> g<-ggplot(dat,aes(y=y,x=x1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("unadjusted=y vs x1")
> #plot residual of y adjusted for x2 vs residual of x1 adjusted for x2
> g2<-ggplot(dat,aes(y=ey,x=ex1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("adjusted=y,x1 residuals with x2 removed")+labs(x="resid(x1~x2)",y="resid(y~x2)")
> #xombine plots
> multiplot(g,g2, cols=2)
##define multiplot function
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
## define subplots (short example here, I specified some more aesthetics in my script)
plot1a <- qplot(variable1,variable2,data=Mydataframe1)
plot1b <- qplot(variable1,variable3,data=Mydataframe1)
plot1c <- qplot(variable1,variable2,data=Mydataframe2)
plot1d <- qplot(variable1,variable3,data=Mydataframe2)
## plot in one frame
Myplot <- multiplot(plot1a,plot1b,plot1c,plot1d, cols=2)
##define multiplot function
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
## define subplots (short example here, I specified some more aesthetics in my script)
plot1a <- qplot(variable1,variable2,data=Mydataframe1)
plot1b <- qplot(variable1,variable3,data=Mydataframe1)
plot1c <- qplot(variable1,variable2,data=Mydataframe2)
plot1d <- qplot(variable1,variable3,data=Mydataframe2)
## plot in one frame
Myplot <- multiplot(plot1a,plot1b,plot1c,plot1d, cols=2)
#store all data in one data frame (ey and ex2 are residuals with respect to x2)
dat<-data.frame(y=y,x1=x1,x2=x2,ey=resid(lm(y~x2)),ex1=resid(lm(x1~x2)))
#plot y vs x1
g<-ggplot(dat,aes(y=y,x=x1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("unadjusted=y vs x1")
#plot residual of y adjusted for x2 vs residual of x1 adjusted for x2
g2<-ggplot(dat,aes(y=ey,x=ex1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("adjusted=y,x1 residuals with x2 removed")+labs(x="resid(x1~x2)",y="resid(y~x2)")
#xombine plots
multiplot(g,g2, cols=2)
install.packages("nlme")
install.packages("ggplot2movies")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
?multiplot
"??multiplot"
?multiplot()
multiplot
#store all data in one data frame (ey and ex2 are residuals with respect to x2)
dat<-data.frame(y=y,x1=x1,x2=x2,ey=resid(lm(y~x2)),ex1=resid(lm(x1~x2)))
#plot y vs x1
g<-ggplot(dat,aes(y=y,x=x1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("unadjusted=y vs x1")
#plot residual of y adjusted for x2 vs residual of x1 adjusted for x2
g2<-ggplot(dat,aes(y=ey,x=ex1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("adjusted=y,x1 residuals with x2 removed")+labs(x="resid(x1~x2)",y="resid(y~x2)")
#xombine plots
multiplot(g,g2, cols=2)
#store all data in one data frame (ey and ex2 are residuals with respect to x2)
dat<-data.frame(y=y,x1=x1,x2=x2,ey=resid(lm(y~x2)),ex1=resid(lm(x1~x2)))
#plot y vs x1
g<-ggplot(dat,aes(y=y,x=x1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("unadjusted=y vs x1")
#plot residual of y adjusted for x2 vs residual of x1 adjusted for x2
g2<-ggplot(dat,aes(y=ey,x=ex1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("adjusted=y,x1 residuals with x2 removed")+labs(x="resid(x1~x2)",y="resid(y~x2)")
#xombine plots
multiplot(g,g2, cols=2)
ggplot
multiplot()
multiplot()
#store all data in one data frame (ey and ex2 are residuals with respect to x2)
dat<-data.frame(y=y,x1=x1,x2=x2,ey=resid(lm(y~x2)),ex1=resid(lm(x1~x2)))
#plot y vs x1
g<-ggplot(dat,aes(y=y,x=x1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("unadjusted=y vs x1")
#plot residual of y adjusted for x2 vs residual of x1 adjusted for x2
g2<-ggplot(dat,aes(y=ey,x=ex1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("adjusted=y,x1 residuals with x2 removed")+labs(x="resid(x1~x2)",y="resid(y~x2)")
#xombine plots
multiplot(g,g2, cols=2)
#store all data in one data frame (ey and ex2 are residuals with respect to x2)
dat<-data.frame(y=y,x1=x1,x2=x2,ey=resid(lm(y~x2)),ex1=resid(lm(x1~x2)))
#plot y vs x1
g<-ggplot(dat,aes(y=y,x=x1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("unadjusted=y vs x1")
#plot residual of y adjusted for x2 vs residual of x1 adjusted for x2
g2<-ggplot(dat,aes(y=ey,x=ex1,colour=x2))+geom_point(colour="grey50",size=2)+geom_smooth(method=lm,se=FALSE,colour="black")+geom_point(size=1.5)+ggtitle("adjusted=y,x1 residuals with x2 removed")+labs(x="resid(x1~x2)",y="resid(y~x2)")
#xombine plots
multiplot(g,g2, cols=2)
install.packages("using R")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
swirl()
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
ones<-rep(1,nrow(galton))
lm(child~ones+parent-1,galton)
lm(child,~parent,galton)
lm(child~ones+parent,galton)
lm(child~1,galton)
view(trees)
head(trees)
fit<-lm(Volume!Girth+Height+Constant -1,trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2<-eliminate("Girth",trees)
head(trees2)
fit2<-lm(Volume~Height+Constant-1,trees2)
lapply(list(fit,fit2),coef)
https://github.com/Jennyxie/ProgrammingAssignment2.git
$git clone https://github.com/Jennyxie/ProgrammingAssignment2.git
git clone https://github.com/Jennyxie/ProgrammingAssignment2.git
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url=fileUrl,destfile="idaho_housing.csv",mode="w",method="curl")
list.files(".")
dateDownloaded <- date()
dateDownloaded
idaho_housing <- read.csv("idaho_housing.csv")
head(idaho_housing)
length(idaho_housing$VAL[!is.na(idaho_housing$VAL) & idaho_housing$VAL==24])
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url=fileUrl1, destfile="gov_NGAP.xlsx", mode="w", method="curl")
dateDownloaded <- date()
print(dateDownloaded)
library(xlsx)
rowIndex <- 18:23
colIndx <- 7:15
dat <- read.xlsx(file="gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndx,startRow=18, endRow=23, header=TRUE)
head(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
fileUrl2 <- "http://d396qusza40orc.cloudfront.net/getdata/data/restaurants.xml"
doc <- xmlTreeParse(file=fileUrl2,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl2 <- "http://d396qusza40orc.cloudfront.net/getdata/data/restaurants.xml"
doc <- xmlTreeParse(file=fileUrl2,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]][[1]]
zipcode <- xpathSApply(rootNode,"//zipcode",xmlValue)
length(zipcode[zipcode==21231])
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url=fileUrl1, destfile="fsspid.csv", mode="w", method="curl")
dateDownloaded <- date()
print(dateDownloaded)
library(data.table)
DT <- fread(input="fsspid.csv", sep=",")
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
setwd("/Users/njvijay/big_data/datascience_johnhopkins/getting_cleaning_data/Week1/Quiz1")
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url=fileUrl1, destfile="fsspid.csv", mode="w", method="curl")
dateDownloaded <- date()
print(dateDownloaded)
library(data.table)
DT <- fread(input="fsspid.csv", sep=",")
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
> download.file(fileUrl, destfile="./pid.csv", method="curl")
> library(data.table)
> DT <- fread("./pid.csv")
> file.info("./pid.csv")$size
> system.time(DT[,mean(pwgtp15),by=SEX])
> system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
> system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
> system.time(mean(DT$pwgtp15,by=DT$SEX))
> system.time(tapply(DT$pwgtp15,DT$SEX,mean))
> system.time(rowMeans(DT)[DT$SEX==1])+system.time(rowMeans(DT)[DT$SEX==2])
install.packages("swirl")
install_from_swirl("Regression Models")
library(swirl)
install_from_swirl("regression model")
install_from_swirl("Regression Models")
swirl()
6
dim(IntersetSprays)
dim(InsectSprays)
head(InsectSprays,15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays)
sapply(InsectSprays,class)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
est <- fit(,1)
est <- fit[,1]
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray-1, InsectSprays))
nfit <- lm(count ~ spray -1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray, InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
fit$coef[2] - fit$coef[3] /1.6011
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunder)
dim("hunger")
dim(hunger)
948
names(hunger[,13])
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)
summary(fit)$coef
lmF <- x[hunger$sec=="Female"]
lmF <- x[hunger$Sex=="Female"]
swirl()
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$sex=="Male"] ~ hunger$year[hunger$Sex=="Male"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex)
summary(lmBoth)$coef
summary(lmBoth)
lmInter <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex + hunger$Year * hunger$Sex)
summary(lmInter)
swirl()
install_from_packages("Regression model")
install_from_swirl("Regression Models")
swirl(library())
swirl(ilbrary)
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Regression Models")
swirl()
fit <- lm(y~x, out2)
plot(fit, which=1)
fitno <- lm(y~x, fit2[-1,]
)
fitno <- lm(y ~ x, fit2[-1,])
fitno <- lm(y ~ x, out2[-1,])
plot(fit2, which=1)
plot(fitno, which=1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1,"y"]- predict(fitno, out2[1,])
1-resid(fit)[1]/resno
headhatvalues(fit)
head(hatvalues(fit))
sigma <- sqrt(deviance(fit))/df.residual(fit)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd,rstand(fit)))
head(cbind(rstd,rstandard(fit))
)
plot(fit,which=3)
plot(fit,which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit[1])/sigma1*sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- prdict(fitno,out2)-predict(fit,out2)
dy <- predict(fitno,out2) - predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)$coefficient
fit1 <- lm(mpg ~ as.factor(cyl), data = mtcars)
summary(fit1)$coef[3]
fit_inter <- lm(mpg ~ factor(cyl) * wt, data = mtcars)
anova(fit, fit_inter, test = "Chisq")
fit4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit4)$coefficient
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y ~ x)
hatvalues(fit5)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit6 <- lm(y ~ x)
dfbetas(fit6)[, 2]
swirl()
data(mtcars)
n <- length(mtcars$mpg)
alpha <- 0.05
fit <- lm(mpg ~ am, data = mtcars)
coef(summary(fit))
pe <- coef(summary(fit))["am", "Estimate"]
se <- coef(summary(fit))["am", "Std. Error"]
tstat <- qt(1 - alpha/2, n - 2)  # n - 2 for model with intercept and slope
pe + c(-1, 1) * (se * tstat)
bestfit <- lm(mpg ~ wt + qsec + am, data = mtcars)
coef(summary(bestfit))
pe <- coef(summary(bestfit))["am", "Estimate"]
se <- coef(summary(bestfit))["am", "Std. Error"]
tstat <- qt(1 - alpha/2, n - 2)  # n - 2 for model with intercept and slope
pe + c(-1, 1) * (se * tstat)
fit1 <- lm(mpg ~ wt, data = mtcars)
fit2 <- update(fit1, mpg ~ wt + qsec)
fit3 <- update(fit2, mpg ~ wt + qsec + am)
anova(fit1, fit2, fit3)
mtcars_vars <- mtcars[, c(1, 6, 7, 9)]
mar.orig <- par()$mar  # save the original values
par(mar = c(1, 1, 1, 1))  # set your new values
pairs(mtcars_vars, panel = panel.smooth, col = 9 + mtcars$wt)
library(ggplot2)
library(gridExtra)
mpg_dist <- qplot(mtcars_vars$mpg, fill = I("red"))
wt_dist <- qplot(mtcars_vars$wt, fill = I("lightblue"))
qsec_dist <- qplot(mtcars_vars$qsec, fill = I("purple"))
am_dist <- qplot(mtcars_vars$am, fill = I("green"))
grid.arrange(mpg_dist, wt_dist, qsec_dist, am_dist, ncol = 2)
mtcars_vars <- mtcars[, c(1, 6, 7, 9)]
mar.orig <- par()$mar  # save the original values
par(mar = c(2, 2, 2, 2))  # set your new values
boxplot(mtcars_vars[mtcars_vars$am == 1, ]$mpg, mtcars_vars[mtcars_vars$am ==
0, ]$mpg, names = c("Manual", "Automatic"))
library(car)
leveneTest(mpg ~ factor(am), data = mtcars_vars)
mar.orig <- par()$mar  # save the original values
par(mar = c(2, 2, 2, 2))  # set your new values
plot(bestfit, which = c(1:1))
par(mar = mar.orig)  # put the original values back
summary(cars)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
data(mtcars)
n <- length(mtcars$mpg)
alpha <- 0.05
fit <- lm(mpg ~ am, data = mtcars)
coef(summary(fit))
```{r include=FALSE}
